package com.github.andrepenteado.contest.actions.vendas;import java.util.Date;import java.util.List;import org.mentawai.authorization.Authorizable;import org.mentawai.core.BaseAction;import org.mentawai.list.ListData;import org.mentawai.list.ListManager;import com.github.andrepenteado.annotations.ActionClass;import com.github.andrepenteado.annotations.ConsequenceOutput;import com.github.andrepenteado.annotations.Consequences;import com.github.andrepenteado.contest.KGlobal;import com.github.andrepenteado.contest.entity.Funcionario;import com.github.andrepenteado.contest.services.CadastroService;import com.github.andrepenteado.contest.services.VendaService;import com.github.andrepenteado.core.ServicesFactory;import com.github.andrepenteado.util.ConfigHelper;import com.github.andrepenteado.util.Log4jWrapper;import com.github.andrepenteado.util.UsuarioLogadoWrapper;/** * @author Andre Penteado * @since 14/11/2007 - 18:29:54 */@ActionClass(prefix = "/vendas/relatorio")public class RelatorioVendaAction extends BaseAction implements Authorizable {    private Log4jWrapper log = new Log4jWrapper(RelatorioVendaAction.class, null);    private VendaService vendaServices = null;    private CadastroService cadastroServices = null;    private void instanciarServicos(UsuarioLogadoWrapper userLogin) {        try {            vendaServices = (VendaService)ServicesFactory.getInstance(VendaService.class, new Object[] { userLogin });            cadastroServices = (CadastroService)ServicesFactory.getInstance(CadastroService.class, new Object[] { userLogin });            log = new Log4jWrapper(RelatorioVendaAction.class, userLogin);        }        catch (Exception ex) {            log.fatal("AÇÕES NÃO INSTANCIADAS: ".concat(RelatorioVendaAction.class.getName()), ex);        }    }    @SuppressWarnings("rawtypes")    @Override    public boolean authorize(String innerAction, Object user, List groups) {        if (user == null || groups == null)            return false;        instanciarServicos((UsuarioLogadoWrapper)user);        if (groups.indexOf(KGlobal.CATEGORIA_SUPERUSUARIO) != -1 || groups.indexOf(KGlobal.CATEGORIA_ADMINISTRATIVO) != -1)            return true;        return false;    }    @Consequences(outputs = @ConsequenceOutput(page = "/vendas/relatorio/produtos_por_cidade.jsp"))    public String produtosPorCidade() {        try {            Date dataInicial = input.getDate("txt_data_inicial", "dd/MM/yyyy");            Date dataFinal = input.getDate("txt_data_final", "dd/MM/yyyy");            if (dataInicial == null) {                output.setValue("txt_data_inicial", new Date());                dataInicial = new Date();            }            if (dataFinal == null) {                output.setValue("txt_data_final", new Date());                dataFinal = new Date();            }            int ordenacao = input.getInt("lst_tipo_pesquisa");            if (ordenacao < 0) {                output.setValue("lst_tipo_pesquisa", 1);                ordenacao = 1;            }            String nomeCidade = input.getString("txt_cidade");            List<Object[]> listaProdutosCidade = vendaServices.pesquisarProdutosVendidosPorCidade(dataInicial, dataFinal, nomeCidade, ordenacao);            output.setValue("listaProdutosCidade", listaProdutosCidade);        }        catch (Exception ex) {            addError(ConfigHelper.get().getString("error.general"));            log.error(ConfigHelper.get().getString("error.general"), ex);            return ERROR;        }        return SUCCESS;    }    @Consequences(outputs = @ConsequenceOutput(page = "/vendas/relatorio/produtos_por_vendedor.jsp"))    public String produtosPorVendedor() {        try {            ListData listaFuncionarios = ListManager.convert(cadastroServices.pesquisarFuncionarioPorNome(""), "id", "nome");            output.setValue("listaFuncionarios", listaFuncionarios);            long idFuncionario = input.getLong("cbo_funcionario");            Funcionario funcionario = new Funcionario(idFuncionario);            int ordenacao = input.getInt("lst_tipo_pesquisa");            if (ordenacao < 0) {                output.setValue("lst_tipo_pesquisa", 1);                ordenacao = 1;            }            Date dataInicial = input.getDate("txt_data_inicial", "dd/MM/yyyy");            Date dataFinal = input.getDate("txt_data_final", "dd/MM/yyyy");            if (dataInicial == null) {                output.setValue("txt_data_inicial", new Date());                dataInicial = new Date();            }            if (dataFinal == null) {                output.setValue("txt_data_final", new Date());                dataFinal = new Date();            }            List<Object[]> listaProdutosVendedor = vendaServices.pesquisarProdutosVendidosPorVendedor(dataInicial, dataFinal, funcionario, ordenacao);            output.setValue("listaProdutosVendedor", listaProdutosVendedor);        }        catch (Exception ex) {            addError(ConfigHelper.get().getString("error.general"));            log.error(ConfigHelper.get().getString("error.general"), ex);            return ERROR;        }        return SUCCESS;    }    @Consequences(outputs = @ConsequenceOutput(page = "/vendas/relatorio/produtos_mais_vendidos.jsp"))    public String produtosMaisVendidos() {        try {            Date dataInicial = input.getDate("txt_data_inicial", "dd/MM/yyyy");            Date dataFinal = input.getDate("txt_data_final", "dd/MM/yyyy");            if (dataInicial == null) {                output.setValue("txt_data_inicial", new Date());                dataInicial = new Date();            }            if (dataFinal == null) {                output.setValue("txt_data_final", new Date());                dataFinal = new Date();            }            int ordenacao = input.getInt("lst_tipo_pesquisa");            if (ordenacao < 0) {                output.setValue("lst_tipo_pesquisa", 1);                ordenacao = 1;            }            List<Object[]> listaProdutosMaisVendidos = vendaServices.pesquisarProdutosMaisVendidos(dataInicial, dataFinal, ordenacao);            output.setValue("listaProdutosMaisVendidos", listaProdutosMaisVendidos);        }        catch (Exception ex) {            addError(ConfigHelper.get().getString("error.general"));            log.error(ConfigHelper.get().getString("error.general"), ex);            return ERROR;        }        return SUCCESS;    }}