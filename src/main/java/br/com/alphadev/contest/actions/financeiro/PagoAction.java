package br.com.alphadev.contest.actions.financeiro;import java.util.ArrayList;import java.util.Collection;import java.util.Date;import java.util.List;import org.mentawai.authorization.Authorizable;import org.mentawai.core.BaseAction;import br.com.alphadev.annotations.ActionClass;import br.com.alphadev.annotations.ConsequenceOutput;import br.com.alphadev.annotations.Consequences;import br.com.alphadev.contest.KGlobal;import br.com.alphadev.contest.KGlobal.TipoPesquisaPagar;import br.com.alphadev.contest.entity.Pago;import br.com.alphadev.contest.entity.valueObject.FormaPagamento;import br.com.alphadev.contest.filters.CompraFilter;import br.com.alphadev.core.ServicesFactory;import br.com.alphadev.util.ConfigHelper;import br.com.alphadev.util.Log4jWrapper;import br.com.alphadev.util.UsuarioLogadoWrapper;/** * @author Andre Penteado * @since 14/11/2007 - 17:50:16 */@ActionClass(prefix = "/financeiro/pago")public class PagoAction extends BaseAction implements Authorizable {    private Log4jWrapper log = new Log4jWrapper(PagoAction.class, null);    private void instanciarServicos(UsuarioLogadoWrapper userLogin) {        try {            log = new Log4jWrapper(PagoAction.class, userLogin);        }        catch (Exception ex) {            log.fatal("AÇÕES NÃO INSTANCIADAS: ".concat(PagoAction.class.getName()), ex);        }    }    @SuppressWarnings("rawtypes")    @Override    public boolean authorize(String innerAction, Object user, List groups) {        if (user == null || groups == null)            return false;        instanciarServicos((UsuarioLogadoWrapper)user);        if (groups.indexOf(KGlobal.CATEGORIA_SUPERUSUARIO) != -1 || groups.indexOf(KGlobal.CATEGORIA_FINANCEIRO) != -1)            return true;        return false;    }    @Consequences(outputs = @ConsequenceOutput(page = "/financeiro/pago/pesquisar.jsp"))    public String pesquisar() {        try {            Date emissaoInicial = input.getDate("txt_emissao_inicial", "dd/MM/yyyy");            Date emissaoFinal = input.getDate("txt_emissao_final", "dd/MM/yyyy");            Date vencimentoInicial = input.getDate("txt_vencimento_inicial", "dd/MM/yyyy");            Date vencimentoFinal = input.getDate("txt_vencimento_final", "dd/MM/yyyy");            int[] idsTiposConta = input.getInts("chk_tipos_conta");            long idFornecedor = input.getLong("txt_id_fornecedor");            long numero = input.getLong("txt_numero");            CompraFilter<Pago> filter = ServicesFactory.getInstance(CompraFilter.class, Pago.class);            Collection<Pago> listaPago = new ArrayList<Pago>();            if (input.getString(TipoPesquisaPagar.NUMERO.name()) != null && input.getString(TipoPesquisaPagar.NUMERO.name()).length() > 0) {                filter.setNumeroCompra(numero);                listaPago = filter.executeFilter();                output.setValue("tabName", TipoPesquisaPagar.NUMERO);            }            else if (input.getString(TipoPesquisaPagar.FORNECEDOR.name()) != null && input.getString(TipoPesquisaPagar.FORNECEDOR.name()).length() > 0) {                filter.setIdFornecedor(idFornecedor);                listaPago = filter.executeFilter();                output.setValue("tabName", TipoPesquisaPagar.FORNECEDOR);            }            else if (input.getString(TipoPesquisaPagar.EMISSAO.name()) != null && input.getString(TipoPesquisaPagar.EMISSAO.name()).length() > 0) {                filter.setDataEmissaoInicial(emissaoInicial);                filter.setDataEmissaoFinal(emissaoFinal);                listaPago = filter.executeFilter();                output.setValue("tabName", TipoPesquisaPagar.EMISSAO);            }            else if (input.getString(TipoPesquisaPagar.VENCIMENTO.name()) != null && input.getString(TipoPesquisaPagar.VENCIMENTO.name()).length() > 0) {                filter.setDataVencimentoInicial(vencimentoInicial);                filter.setDataVencimentoFinal(vencimentoFinal);                listaPago = filter.executeFilter();                output.setValue("tabName", TipoPesquisaPagar.EMISSAO);            }            else if (input.getString(TipoPesquisaPagar.TIPO_CONTA.name()) != null && input.getString(TipoPesquisaPagar.TIPO_CONTA.name()).length() > 0) {                filter.setIdsTiposConta(idsTiposConta);                listaPago = filter.executeFilter();                output.setValue("tabName", TipoPesquisaPagar.TIPO_CONTA);            }            output.setValue("listaPago", listaPago);            // Colunas do relatório            String[] colunas = input.getStrings("chk_colunas_pesquisa");            if (colunas != null && colunas.length > 0)                for (String col : colunas)                    output.setValue(col, '1');        }        catch (Exception ex) {            addError(ConfigHelper.get().getString("error.general"));            log.error(ConfigHelper.get().getString("error.general"), ex);            return ERROR;        }        return SUCCESS;    }    @Consequences(outputs = @ConsequenceOutput(page = "/financeiro/pago/cadastro.jsp"))    public String cadastro() {        try {            Pago pago = new Pago(input.getLong("txt_id"));            output.setValue("pago", pago);        }        catch (Exception ex) {            addError(ConfigHelper.get().getString("error.general"));            log.error(ConfigHelper.get().getString("error.general"), ex);            return ERROR;        }        return SUCCESS;    }    @Consequences(outputs = { @ConsequenceOutput(result = SUCCESS, page = "/comum/mensagem.jsp"),                    @ConsequenceOutput(result = ERROR, page = "/financeiro/pago/cadastro.jsp") })    public String gravar() {        try {            Pago pago = new Pago(input.getLong("hid_id"));            pago.setFormaPagamento(FormaPagamento.valueOf(input.getString("cbo_forma_pagamento")));            pago.setDataPagamento(input.getDate("txt_data_pagamento", "dd/MM/yyyy"));            try {                if (!"".equals(input.getString("txt_valor_pago")))                    pago.setValorPago(new Double(input.getString("txt_valor_pago").replace(".", "").replace(",", ".")));            }            catch (Exception ex) {                addError("txt_valor_pago", ConfigHelper.getProperty("error.invalid", "Valor Pago"));                return ERROR;            }            pago.gravar();        }        catch (Exception ex) {            addError(ConfigHelper.get().getString("error.general"));            log.error(ConfigHelper.get().getString("error.general"), ex);            return ERROR;        }        output.setValue("titulo", "Pagamento");        output.setValue("mensagem", ConfigHelper.getProperty("info.saveOk", "Pagamento"));        output.setValue("url", input.getProperty("contextPath") + "/financeiro/pago.pesquisar.action");        return SUCCESS;    }    @Consequences(outputs = @ConsequenceOutput(page = "/financeiro/pago/pesquisar.jsp"))    public String estornar() {        try {            Pago pago = new Pago(input.getLong("txt_id"));            pago.excluir();        }        catch (Exception ex) {            addError(ConfigHelper.get().getString("error.general"));            log.error(ConfigHelper.get().getString("error.general"), ex);            return ERROR;        }        return SUCCESS;    }}